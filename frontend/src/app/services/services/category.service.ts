/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { CategoryResponse } from '../models/category-response';
import { deleteCategory1 } from '../fn/category/delete-category-1';
import { DeleteCategory1$Params } from '../fn/category/delete-category-1';
import { existById1 } from '../fn/category/exist-by-id-1';
import { ExistById1$Params } from '../fn/category/exist-by-id-1';
import { findAllCategory } from '../fn/category/find-all-category';
import { FindAllCategory$Params } from '../fn/category/find-all-category';
import { findCategoryById } from '../fn/category/find-category-by-id';
import { FindCategoryById$Params } from '../fn/category/find-category-by-id';
import { PageResponseCategoryResponse } from '../models/page-response-category-response';
import { saveCategory } from '../fn/category/save-category';
import { SaveCategory$Params } from '../fn/category/save-category';
import { updateCategory } from '../fn/category/update-category';
import { UpdateCategory$Params } from '../fn/category/update-category';

@Injectable({ providedIn: 'root' })
export class CategoryService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `findCategoryById()` */
  static readonly FindCategoryByIdPath = '/categories/{categorie-id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findCategoryById()` instead.
   *
   * This method doesn't expect any request body.
   */
  findCategoryById$Response(params: FindCategoryById$Params, context?: HttpContext): Observable<StrictHttpResponse<CategoryResponse>> {
    return findCategoryById(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findCategoryById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findCategoryById(params: FindCategoryById$Params, context?: HttpContext): Observable<CategoryResponse> {
    return this.findCategoryById$Response(params, context).pipe(
      map((r: StrictHttpResponse<CategoryResponse>): CategoryResponse => r.body)
    );
  }

  /** Path part for operation `updateCategory()` */
  static readonly UpdateCategoryPath = '/categories/{categorie-id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateCategory()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateCategory$Response(params: UpdateCategory$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return updateCategory(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateCategory$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateCategory(params: UpdateCategory$Params, context?: HttpContext): Observable<void> {
    return this.updateCategory$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `deleteCategory1()` */
  static readonly DeleteCategory1Path = '/categories/{categorie-id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteCategory1()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteCategory1$Response(params: DeleteCategory1$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return deleteCategory1(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteCategory1$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteCategory1(params: DeleteCategory1$Params, context?: HttpContext): Observable<void> {
    return this.deleteCategory1$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `findAllCategory()` */
  static readonly FindAllCategoryPath = '/categories';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findAllCategory()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAllCategory$Response(params?: FindAllCategory$Params, context?: HttpContext): Observable<StrictHttpResponse<PageResponseCategoryResponse>> {
    return findAllCategory(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findAllCategory$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAllCategory(params?: FindAllCategory$Params, context?: HttpContext): Observable<PageResponseCategoryResponse> {
    return this.findAllCategory$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageResponseCategoryResponse>): PageResponseCategoryResponse => r.body)
    );
  }

  /** Path part for operation `saveCategory()` */
  static readonly SaveCategoryPath = '/categories';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `saveCategory()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  saveCategory$Response(params: SaveCategory$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    return saveCategory(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `saveCategory$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  saveCategory(params: SaveCategory$Params, context?: HttpContext): Observable<number> {
    return this.saveCategory$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `existById1()` */
  static readonly ExistById1Path = '/categories/exists/{categorie-id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `existById1()` instead.
   *
   * This method doesn't expect any request body.
   */
  existById1$Response(params: ExistById1$Params, context?: HttpContext): Observable<StrictHttpResponse<boolean>> {
    return existById1(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `existById1$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  existById1(params: ExistById1$Params, context?: HttpContext): Observable<boolean> {
    return this.existById1$Response(params, context).pipe(
      map((r: StrictHttpResponse<boolean>): boolean => r.body)
    );
  }

}
