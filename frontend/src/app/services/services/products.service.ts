/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { deleteCategory } from '../fn/products/delete-category';
import { DeleteCategory$Params } from '../fn/products/delete-category';
import { existById } from '../fn/products/exist-by-id';
import { ExistById$Params } from '../fn/products/exist-by-id';
import { findAllProduct } from '../fn/products/find-all-product';
import { FindAllProduct$Params } from '../fn/products/find-all-product';
import { findProductById } from '../fn/products/find-product-by-id';
import { FindProductById$Params } from '../fn/products/find-product-by-id';
import { newProduct } from '../fn/products/new-product';
import { NewProduct$Params } from '../fn/products/new-product';
import { PageResponseProductResponse } from '../models/page-response-product-response';
import { ProductResponse } from '../models/product-response';
import { updateProduct } from '../fn/products/update-product';
import { UpdateProduct$Params } from '../fn/products/update-product';

@Injectable({ providedIn: 'root' })
export class ProductsService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `findProductById()` */
  static readonly FindProductByIdPath = '/products/{product-id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findProductById()` instead.
   *
   * This method doesn't expect any request body.
   */
  findProductById$Response(params: FindProductById$Params, context?: HttpContext): Observable<StrictHttpResponse<ProductResponse>> {
    return findProductById(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findProductById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findProductById(params: FindProductById$Params, context?: HttpContext): Observable<ProductResponse> {
    return this.findProductById$Response(params, context).pipe(
      map((r: StrictHttpResponse<ProductResponse>): ProductResponse => r.body)
    );
  }

  /** Path part for operation `updateProduct()` */
  static readonly UpdateProductPath = '/products/{product-id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateProduct()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateProduct$Response(params: UpdateProduct$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return updateProduct(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateProduct$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateProduct(params: UpdateProduct$Params, context?: HttpContext): Observable<void> {
    return this.updateProduct$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `deleteCategory()` */
  static readonly DeleteCategoryPath = '/products/{product-id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteCategory()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteCategory$Response(params: DeleteCategory$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return deleteCategory(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteCategory$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteCategory(params: DeleteCategory$Params, context?: HttpContext): Observable<void> {
    return this.deleteCategory$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `findAllProduct()` */
  static readonly FindAllProductPath = '/products';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findAllProduct()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAllProduct$Response(params?: FindAllProduct$Params, context?: HttpContext): Observable<StrictHttpResponse<PageResponseProductResponse>> {
    return findAllProduct(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findAllProduct$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAllProduct(params?: FindAllProduct$Params, context?: HttpContext): Observable<PageResponseProductResponse> {
    return this.findAllProduct$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageResponseProductResponse>): PageResponseProductResponse => r.body)
    );
  }

  /** Path part for operation `newProduct()` */
  static readonly NewProductPath = '/products';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `newProduct()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  newProduct$Response(params: NewProduct$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    return newProduct(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `newProduct$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  newProduct(params: NewProduct$Params, context?: HttpContext): Observable<number> {
    return this.newProduct$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `existById()` */
  static readonly ExistByIdPath = '/products/exists/{product-id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `existById()` instead.
   *
   * This method doesn't expect any request body.
   */
  existById$Response(params: ExistById$Params, context?: HttpContext): Observable<StrictHttpResponse<boolean>> {
    return existById(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `existById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  existById(params: ExistById$Params, context?: HttpContext): Observable<boolean> {
    return this.existById$Response(params, context).pipe(
      map((r: StrictHttpResponse<boolean>): boolean => r.body)
    );
  }

}
